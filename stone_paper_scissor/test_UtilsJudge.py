# ********RoostGPT********
"""
Test generated by RoostGPT for test python-mini using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=utils_judge_50b99c8c9c
ROOST_METHOD_SIG_HASH=utils_judge_4777801da6

Here are the Pytest test scenarios for the provided `judge` function:

Scenario 1: Test player and computer choose the same option
Details:
  TestName: test_judge_draw
  Description: This test verifies that when the player and computer choose the same option, the function returns "Draw".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with the same value for `player` and `computer` parameters.
  Assert: Check that the function returns "Draw".
Validation:
  This test is important to ensure that the function correctly identifies a draw scenario when both the player and computer choose the same option. It aligns with the business logic that a draw occurs when both choices are identical.

Scenario 2: Test player loses when choosing Rock against Paper
Details:
  TestName: test_judge_player_loses_rock_vs_paper
  Description: This test verifies that when the player chooses Rock (0) and the computer chooses Paper (1), the function returns "Lose".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with `player` as 0 and `computer` as 1.
  Assert: Check that the function returns "Lose".
Validation:
  This test is crucial to validate that the function correctly determines the player's loss when they choose Rock and the computer chooses Paper. It aligns with the game's rules and the specified business logic.

Scenario 3: Test player loses when choosing Paper against Scissors
Details:
  TestName: test_judge_player_loses_paper_vs_scissors
  Description: This test verifies that when the player chooses Paper (1) and the computer chooses Scissors (2), the function returns "Lose".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with `player` as 1 and `computer` as 2.
  Assert: Check that the function returns "Lose".
Validation:
  This test is essential to confirm that the function accurately identifies the player's loss when they choose Paper and the computer chooses Scissors. It adheres to the game's rules and the defined business logic.

Scenario 4: Test player loses when choosing Scissors against Rock
Details:
  TestName: test_judge_player_loses_scissors_vs_rock
  Description: This test verifies that when the player chooses Scissors (2) and the computer chooses Rock (0), the function returns "Lose".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with `player` as 2 and `computer` as 0.
  Assert: Check that the function returns "Lose".
Validation:
  This test is necessary to ensure that the function correctly determines the player's loss when they choose Scissors and the computer chooses Rock. It follows the game's rules and the specified business logic.

Scenario 5: Test player wins when choosing Rock against Scissors
Details:
  TestName: test_judge_player_wins_rock_vs_scissors
  Description: This test verifies that when the player chooses Rock (0) and the computer chooses Scissors (2), the function returns "Win".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with `player` as 0 and `computer` as 2.
  Assert: Check that the function returns "Win".
Validation:
  This test is important to validate that the function correctly identifies the player's win when they choose Rock and the computer chooses Scissors. It aligns with the game's rules and the defined business logic.

Scenario 6: Test player wins when choosing Paper against Rock
Details:
  TestName: test_judge_player_wins_paper_vs_rock
  Description: This test verifies that when the player chooses Paper (1) and the computer chooses Rock (0), the function returns "Win".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with `player` as 1 and `computer` as 0.
  Assert: Check that the function returns "Win".
Validation:
  This test is crucial to confirm that the function accurately determines the player's win when they choose Paper and the computer chooses Rock. It adheres to the game's rules and the specified business logic.

Scenario 7: Test player wins when choosing Scissors against Paper
Details:
  TestName: test_judge_player_wins_scissors_vs_paper
  Description: This test verifies that when the player chooses Scissors (2) and the computer chooses Paper (1), the function returns "Win".
Execution:
  Arrange: No setup required.
  Act: Call `judge` function with `player` as 2 and `computer` as 1.
  Assert: Check that the function returns "Win".
Validation:
  This test is essential to ensure that the function correctly identifies the player's win when they choose Scissors and the computer chooses Paper. It follows the game's rules and the defined business logic.

These test scenarios cover the expected behavior of the `judge` function based on the provided business logic. They validate the function's ability to determine the outcome (win, lose, or draw) based on the player's and computer's choices in the game of Rock-Paper-Scissors.
"""

# ********RoostGPT********
import utils
import pytest

def test_judge_draw():
    assert utils.judge(0, 0) == "Draw"
    assert utils.judge(1, 1) == "Draw"
    assert utils.judge(2, 2) == "Draw"

def test_judge_player_loses_rock_vs_paper():
    assert utils.judge(0, 1) == "Lose"

def test_judge_player_loses_paper_vs_scissors():
    assert utils.judge(1, 2) == "Lose"

def test_judge_player_loses_scissors_vs_rock():
    assert utils.judge(2, 0) == "Lose"

def test_judge_player_wins_rock_vs_scissors():
    assert utils.judge(0, 2) == "Win"

def test_judge_player_wins_paper_vs_rock():
    assert utils.judge(1, 0) == "Win"

def test_judge_player_wins_scissors_vs_paper():
    assert utils.judge(2, 1) == "Win"
