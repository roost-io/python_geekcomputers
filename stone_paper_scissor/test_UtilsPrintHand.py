# ********RoostGPT********
"""
Test generated by RoostGPT for test python-mini using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=utils_print_hand_c409225e02
ROOST_METHOD_SIG_HASH=utils_print_hand_6a64076157

================================VULNERABILITIES================================
Vulnerability: CWE-20: Improper Input Validation
Issue: The 'hand' parameter in the 'print_hand' function is not validated. This could allow invalid or unexpected input to be passed, potentially leading to unintended behavior or crashes.
Solution: Validate the 'hand' parameter to ensure it is within the expected range (0-2) before using it to index the 'hands' list. Consider using a try-except block or an explicit check.

Vulnerability: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Issue: The 'name' parameter is directly concatenated into the output string without any sanitization. If the 'name' contains HTML or JavaScript code, it could lead to cross-site scripting (XSS) vulnerabilities if the output is rendered in a web context.
Solution: Sanitize the 'name' parameter by escaping or encoding any special characters that could be interpreted as HTML or JavaScript. Use a trusted library for output encoding, such as 'html.escape()' or a web framework's built-in templating system that automatically handles XSS prevention.

================================================================================
Here are the Pytest test scenarios for the provided `print_hand` function:

Scenario 1: Valid hand value
Details:
  TestName: test_print_hand_valid_value
  Description: This test verifies that the function correctly prints the chosen hand value when a valid hand value is provided.
Execution:
  Arrange: No specific setup required.
  Act: Call the `print_hand` function with a valid hand value (e.g., 0, 1, or 2) and an optional name parameter.
  Assert: Check if the function prints the correct hand value ("Rock", "Paper", or "Scissors") along with the provided name.
Validation:
  This test is important to ensure that the function accurately maps the hand value to the corresponding hand string and prints it correctly. It validates the core functionality of the `print_hand` function.

Scenario 2: Out-of-range hand value
Details:
  TestName: test_print_hand_out_of_range_value
  Description: This test verifies that the function handles an out-of-range hand value gracefully and raises an appropriate exception.
Execution:
  Arrange: No specific setup required.
  Act: Call the `print_hand` function with an out-of-range hand value (e.g., -1 or 3).
  Assert: Check if the function raises an `IndexError` exception.
Validation:
  This test is important to ensure that the function does not produce unexpected behavior or crash when an invalid hand value is provided. It validates that the function has proper error handling for out-of-range values.

Scenario 3: Default name parameter
Details:
  TestName: test_print_hand_default_name
  Description: This test verifies that the function uses the default name "Guest" when no name parameter is provided.
Execution:
  Arrange: No specific setup required.
  Act: Call the `print_hand` function with a valid hand value but without providing the name parameter.
  Assert: Check if the function prints the hand value along with the default name "Guest".
Validation:
  This test is important to ensure that the function correctly uses the default name value when no name is explicitly provided. It validates the behavior of the optional name parameter.

Scenario 4: Empty name parameter
Details:
  TestName: test_print_hand_empty_name
  Description: This test verifies that the function handles an empty name parameter correctly.
Execution:
  Arrange: No specific setup required.
  Act: Call the `print_hand` function with a valid hand value and an empty string as the name parameter.
  Assert: Check if the function prints the hand value along with an empty name (i.e., no name is displayed).
Validation:
  This test is important to ensure that the function handles an empty name parameter gracefully and does not produce unexpected behavior or errors. It validates the function's robustness in handling edge cases related to the name parameter.

These test scenarios cover the expected behavior, edge cases, and error conditions for the `print_hand` function. They focus on validating the business logic encapsulated by the function, such as mapping hand values to their corresponding strings, handling out-of-range values, and managing the optional name parameter.
"""

# ********RoostGPT********
import pytest
from io import StringIO
from unittest.mock import patch
import utils

def test_print_hand_valid_value():
    # Scenario 1: Valid hand value
    with patch('sys.stdout', new=StringIO()) as fake_output:
        utils.print_hand(0, "Player")
        assert fake_output.getvalue().strip() == "Player picked: Rock"

    with patch('sys.stdout', new=StringIO()) as fake_output:
        utils.print_hand(1, "Player")
        assert fake_output.getvalue().strip() == "Player picked: Paper"

    with patch('sys.stdout', new=StringIO()) as fake_output:
        utils.print_hand(2, "Player")
        assert fake_output.getvalue().strip() == "Player picked: Scissors"

def test_print_hand_out_of_range_value():
    # Scenario 2: Out-of-range hand value
    with pytest.raises(ValueError):
        utils.print_hand(-1, "Player")

    with pytest.raises(ValueError):
        utils.print_hand(3, "Player")

def test_print_hand_default_name():
    # Scenario 3: Default name parameter
    with patch('sys.stdout', new=StringIO()) as fake_output:
        utils.print_hand(0)
        assert fake_output.getvalue().strip() == "Guest picked: Rock"

def test_print_hand_empty_name():
    # Scenario 4: Empty name parameter
    with patch('sys.stdout', new=StringIO()) as fake_output:
        utils.print_hand(1, "")
        assert fake_output.getvalue().strip() == "picked: Paper"
