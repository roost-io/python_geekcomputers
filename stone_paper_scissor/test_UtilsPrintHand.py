# ********RoostGPT********
"""
Test generated by RoostGPT for test python-mini using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=print_hand_c409225e02
ROOST_METHOD_SIG_HASH=print_hand_6a64076157


Here are the pytest test scenarios for the provided print_hand function:

Scenario 1: Valid Hand Input
Details:
  TestName: test_print_hand_valid_input
  Description: This test verifies that the print_hand function correctly prints the chosen hand for a valid input.
Execution:
  Arrange: No specific setup required.
  Act: Call print_hand with a valid hand input (e.g., 0, 1, or 2) and a name.
  Assert: Check that the function prints the correct hand choice for the given input.
Validation:
  This test is important to ensure that the function accurately represents the chosen hand based on the input value. It validates that the function correctly maps the input to the corresponding hand choice and prints it along with the provided name.

Scenario 2: Default Name
Details:
  TestName: test_print_hand_default_name
  Description: This test verifies that the print_hand function uses the default name "Guest" when no name is provided.
Execution:
  Arrange: No specific setup required.
  Act: Call print_hand with a valid hand input but without providing a name.
  Assert: Check that the function prints the chosen hand with the default name "Guest".
Validation:
  This test ensures that the function handles the case when no name is provided and correctly uses the default name "Guest". It validates that the function's default behavior is implemented correctly.

Scenario 3: Empty Name
Details:
  TestName: test_print_hand_empty_name
  Description: This test verifies that the print_hand function handles an empty name correctly.
Execution:
  Arrange: No specific setup required.
  Act: Call print_hand with a valid hand input and an empty string as the name.
  Assert: Check that the function prints the chosen hand with an empty name.
Validation:
  This test ensures that the function handles the case when an empty name is provided. It validates that the function does not raise any errors and correctly prints the chosen hand with an empty name.

Scenario 4: Out of Range Hand Input
Details:
  TestName: test_print_hand_out_of_range_input
  Description: This test verifies that the print_hand function handles an out-of-range hand input gracefully.
Execution:
  Arrange: No specific setup required.
  Act: Call print_hand with an out-of-range hand input (e.g., -1 or 3) and a name.
  Assert: Check that the function raises an IndexError exception.
Validation:
  This test ensures that the function properly handles cases where the provided hand input is outside the valid range (0, 1, or 2). It validates that the function raises an appropriate exception (IndexError) to indicate an invalid input.

These test scenarios cover the core functionality and edge cases of the print_hand function. They validate the function's behavior for valid inputs, default name handling, empty name handling, and out-of-range input handling. By executing these tests, we can ensure that the function meets its specifications and handles different scenarios correctly.
"""

# ********RoostGPT********
import pytest
from stone_paper_scissor.utils import print_hand
from io import StringIO
from contextlib import redirect_stdout

class TestUtilsPrintHand:
    def test_print_hand_valid_input(self):
        # Scenario 1: Valid Hand Input
        hands = ["Rock", "Paper", "Scissors"]
        for hand in range(len(hands)):
            with redirect_stdout(StringIO()) as output:
                print_hand(hand, "Player")
            assert output.getvalue().strip() == f"Player picked: {hands[hand]}"

    def test_print_hand_default_name(self):
        # Scenario 2: Default Name
        with redirect_stdout(StringIO()) as output:
            print_hand(0)
        assert output.getvalue().strip() == "Guest picked: Rock"

    def test_print_hand_empty_name(self):
        # Scenario 3: Empty Name
        with redirect_stdout(StringIO()) as output:
            print_hand(1, "")
        assert output.getvalue().strip() == " picked: Paper"

    def test_print_hand_out_of_range_input(self):
        # Scenario 4: Out of Range Hand Input
        with pytest.raises(IndexError):
            print_hand(-1, "Player")
        with pytest.raises(IndexError):
            print_hand(3, "Player")
